<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zeus.event.mapper.EventMapper">


	<select id="selectPublicDataEvent" parameterType="User"
		resultType="PublicDataEventDTO">
		SELECT * FROM USER_MANAGEMENT_EVENT A
		LEFT JOIN
		PUBLIC_DATA_EVENT B
		ON A.PUBLIC_DATA_EVENT_NO = B.NO
		WHERE
		A.USER_ACCOUNT_NO=#{no}
	</select>

	<select id="selectEventList" parameterType="SortDTO"
		resultType="EventSelectListDTO">
		SELECT
		E.NO,
		NAME,
		START_DATE,
		END_DATE,
		THUMBURL,
		P.ADDRESS ,
		T.AVG_RATING
		AS RATING,
		longitude,
		latitude
		FROM EVENT E
		LEFT JOIN EVENT_IMG I ON E.NO
		= I.EVENT_NO
		LEFT JOIN PUBLIC_DATA_EVENT P ON E.PUBLIC_DATA_EVENT_NO =
		P.NO
		LEFT JOIN vw_event_avg_rating T ON E.NO=T.NO
		WHERE I.THUMBURL IS
		NOT NULL

		<!-- 검색 조건 추가 -->
		<if test="search != null and search != ''">
			AND p.NAME LIKE '%' || #{search} || '%'
		</if>

		<!-- 날짜 필터링 -->
		<if test="date != null">
			AND #{date} BETWEEN p.START_DATE AND p.END_DATE
		</if>

		<!-- 지역 필터링 -->
		<if test="region != null and region != ''">
			AND P.ADDRESS LIKE '%' || #{region} || '%'
		</if>

		<!-- 정렬 옵션 -->
		ORDER BY
		<choose>
			<when test="sort == 'subDate'">
				CASE
				WHEN END_DATE >= SYSDATE THEN 1  <!-- 진행 중인 이벤트 우선 -->
				ELSE 2  <!-- 종료된 이벤트는 맨 뒤 -->
				END,
				E.NO DESC  <!-- 등록일 순 -->
			</when>
			<when test="sort == 'rating'">
				CASE
				WHEN END_DATE >= SYSDATE THEN 1  <!-- 진행 중인 이벤트 우선 -->
				ELSE 2  <!-- 종료된 이벤트는 맨 뒤 -->
				END,
				RATING DESC  <!-- 인기순 -->
			</when>
			<when test="sort == 'startDate'">
				CASE
				WHEN END_DATE >= SYSDATE THEN 1  <!-- 진행 중인 이벤트 우선 -->
				ELSE 2  <!-- 종료된 이벤트는 맨 뒤 -->
				END,
				START_DATE ASC  <!-- 같은 그룹 내에서는 개최일 순으로 정렬 -->
			</when>

			<otherwise>
				E.NO DESC  <!-- 기본값: 등록일 순 -->
			</otherwise>
		</choose>

		<!-- 페이징 처리 -->
		OFFSET ((#{page} - 1) * 9) ROWS FETCH NEXT 9 ROWS ONLY
	</select>






  	<select id="selectEventRead" parameterType="sortDTO"
		resultType="EventSelectRead">
		SELECT E.NO, E.USER_ACCOUNT_NO, P.NO AS
		PUBLIC_DATA_EVENT_NO, NAME,PRICE,
		PLACE,START_DATE,END_DATE,CONTENT,GOVERNING,HOST,TEL,HOMEPAGE,ADDRESS,LATITUDE,LONGITUDE,I.THUMBURL
		FROM EVENT E
		LEFT JOIN PUBLIC_DATA_EVENT P
		ON E.PUBLIC_DATA_EVENT_NO = P
		.NO
		LEFT JOIN EVENT_IMG I
		ON E.NO = I.EVENT_NO
		WHERE E.NO=#{no} AND
		I.THUMBURL IS NOT NULL
	</select>

	<select id="selectEventReadSub" parameterType="sortDTO"
		resultType="String">
		SELECT URL FROM event
		E
		LEFT JOIN event_img I
		ON E.NO =
		I.event_no
		WHERE E.NO=#{no} AND I.URL IS
		NOT NULL
	</select>

	<select id="selectEventReadReview" parameterType="sortDTO"
		resultType="EventReview">
		SELECT r.no, content, event_no, r.user_account_no,
		r.rating, r.sub_date,
		U.NAME
		FROM event E
		LEFT JOIN event_review r ON
		E.NO = r.event_no
		LEFT JOIN USER_ACCOUNT U ON r.user_account_no = U.NO
		WHERE E.NO = #{no} AND r.no IS NOT NULL
		ORDER BY r.no DESC
		OFFSET
		((#{page} - 1) * 5) ROWS FETCH NEXT 5 ROWS ONLY

	</select>

	<select id="selectEventReadReviewCount" parameterType="sortDTO"
		resultType="int">
		SELECT
		COUNT(*) from event_review
		WHERE EVENT_NO= #{no}
	</select>

	<select id="selectEventReadReviewRating" parameterType="sortDTO"
		resultType="Double">
		SELECT
		RATING from event_review
		WHERE EVENT_NO= #{no}
	</select>

	<insert id="insertEventReview" parameterType="EventReview">
		INSERT INTO
		EVENT_REVIEW
		VALUES(SEQ_EVENT_REVIEW_NO.NEXTVAL,#{content},SYSDATE,#{eventNo},#{userAccountNo},#{rating})
	</insert>
	<delete id="deleteEventReview" parameterType="EventReview">
		DELETE FROM
		EVENT_REVIEW WHERE NO=#{no}
	</delete>
	<delete id="deleteEvent" parameterType="EventDTO">
		DELETE FROM
		EVENT WHERE
		NO=#{no}
	</delete>

	<insert id="insertEventToCart" parameterType="Cart">
		INSERT INTO
		CART
		VALUES(SEQ_CART_NO.NEXTVAL,#{eventNo},#{userAccountNo},#{qt},SYSDATE)
	</insert>

	<select id="selectEventListMonth" parameterType="SortDTO"
		resultType="EventSelectListDTO">
		SELECT
		E.NO,
		P.NAME,
		TO_CHAR(P.START_DATE, 'YYYY-MM-DD') AS START_DATE,
		TO_CHAR(P.END_DATE, 'YYYY-MM-DD') AS END_DATE,
		I.THUMBURL,
		P.ADDRESS,
		T.AVG_RATING AS RATING
		FROM EVENT E
		LEFT JOIN EVENT_IMG I ON E.NO =
		I.EVENT_NO
		LEFT JOIN PUBLIC_DATA_EVENT P ON E.PUBLIC_DATA_EVENT_NO =
		P.NO
		LEFT JOIN vw_event_avg_rating T ON E.NO = T.NO
		WHERE I.THUMBURL IS
		NOT NULL
		AND EXTRACT(YEAR FROM P.START_DATE) = EXTRACT(YEAR FROM
		#{date})
		AND EXTRACT(MONTH FROM P.START_DATE) = EXTRACT(MONTH FROM
		#{date})

		<!-- 정렬 옵션 -->
		ORDER BY P.START_DATE ASC
	</select>
	<select id="cartDuplCheck" parameterType="Cart" resultType="int">
		SELECT count(*) FROM CART
		WHERE USER_ACCOUNT_NO=#{userAccountNo} AND
		EVENT_NO = #{eventNo}
	</select>
	<select id="checkReplyAlready" parameterType="EventReview"
		resultType="int">
		SELECT count(*) FROM event_review
		WHERE
		USER_ACCOUNT_NO=#{userAccountNo} AND EVENT_NO = #{eventNo}
	</select>
	<select id="checkReserved" parameterType="EventReview"
		resultType="int">
		SELECT count(*) FROM RESERVED
		WHERE
		USER_ACCOUNT_NO=#{userAccountNo} AND EVENT_NO = #{eventNo}
	</select>
	<select id="checkEventPrice" parameterType="EventReview"
		resultType="int">
		SELECT price FROM EVENT
		WHERE
		NO = #{eventNo}
	</select>
	<!-- 기존 데이터 확인 (이름 + 시작일 기준) -->
	<select id="checkExistingEvent" resultType="int">
		SELECT COUNT(*) FROM public_data_event
		WHERE NAME = #{name} AND START_DATE = #{startDate}
	</select>

	<!-- 새로운 데이터만 추가 -->
	<insert id="insertEvent">
		INSERT INTO public_data_event
		(NO, NAME, PLACE, START_DATE, END_DATE, CONTENT, GOVERNING, HOST, TEL,
		HOMEPAGE, ADDRESS, LATITUDE, LONGITUDE)
		VALUES
		(SEQ_PUBLIC_DATA_EVENT_NO.NEXTVAL, #{name}, #{place}, #{startDate}, #{endDate}, #{content},
		#{governing}, #{host}, #{tel}, #{homepage}, #{address}, #{latitude},
		#{longitude})
	</insert>

	<!-- 모든 데이터 조회 -->
	<select id="getAllEvents"
		resultType="PublicDataEvent">
		SELECT * FROM public_data_event ORDER BY START_DATE ASC
	</select>
	
	<select id="getAllEventNamesAndDates" resultType="String">
    SELECT name || '_' || TO_CHAR(start_date, 'YYYY-MM-DD') 
    FROM public_data_event
</select>



	<update id="updateEvent" parameterType="PublicDataEvent">
    UPDATE public_data_event
    SET
        name = #{name},
        place = #{place},
        start_date = #{startDate},
        end_date = #{endDate},
        content = #{content},
        governing = #{governing},
        host = #{host},
        tel = #{tel},
        homepage = #{homepage},
        address = #{address},
        latitude = #{latitude},
        longitude = #{longitude}
    WHERE
        no = #{no}
	</update>
	


</mapper>
