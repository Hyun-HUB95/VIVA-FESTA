import { useEffect, useState, useContext } from 'react';
import { Pagination, Button } from 'react-bootstrap';
import { Link } from 'react-router-dom';
import Header from '../../components/Header';
import Footer from '../../components/Footer';
import './notice.css';
import {
  fetchNotices,
  fetchTotalNoticesCount,
  fetchAllNotices,
} from './noticeApi';
import { Context } from '../../Context';

const NoticeList = () => {
  const { darkMode, setDarkMode, getDarkMode, getDarkModeHover } =
    useContext(Context);
  const [notices, setNotices] = useState([]); // Í≥µÏßÄÏÇ¨Ìï≠ Îç∞Ïù¥ÌÑ∞
  const [searchTerm, setSearchTerm] = useState(''); // Í≤ÄÏÉâÏñ¥
  const [currentPage, setCurrentPage] = useState(1); // ÌòÑÏû¨ ÌéòÏù¥ÏßÄ
  const [totalPages, setTotalPages] = useState(1); // Ï¥ù ÌéòÏù¥ÏßÄ Ïàò
  const noticesPerPage = 10; // ÌéòÏù¥ÏßÄÎãπ ÏµúÎåÄ Í≥µÏßÄÏÇ¨Ìï≠ Í∞úÏàò
  const [isSearchMode, setIsSearchMode] = useState(false); // Í≤ÄÏÉâ Î™®Îìú Ïó¨Î∂Ä

  // Ï†ÑÏ≤¥ Í≥µÏßÄÏÇ¨Ìï≠ Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Îäî Ìï®Ïàò
  const loadNotices = async (page) => {
    try {
      const data = await fetchNotices(page, noticesPerPage); // Ï≤òÏùå Ìïú Î≤àÏóê Ï†ÑÏ≤¥ Í≥µÏßÄÏÇ¨Ìï≠ÏùÑ Í∞ÄÏ†∏ÏòµÎãàÎã§.
      setNotices(data); // Ï†ÑÏ≤¥ Í≥µÏßÄÏÇ¨Ìï≠ Îç∞Ïù¥ÌÑ∞Î•º ÏÉÅÌÉúÏóê Ï†ÄÏû•
      setIsSearchMode(false); // ÏùºÎ∞ò Î™®Îìú
    } catch (error) {
      console.error('Ï†ÑÏ≤¥ Í≥µÏßÄÏÇ¨Ìï≠ÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•ò Î∞úÏÉù:', error);
    }
  };

  // üìå Ï†ÑÏ≤¥ Í≥µÏßÄÏÇ¨Ìï≠ Í≤ÄÏÉâ (Í≤ÄÏÉâÏñ¥Í∞Ä ÏûàÏùÑ Îïå Ïã§Ìñâ)
  const loadAllNotices = async (keyword) => {
    try {
      const data = await fetchAllNotices(keyword);
      setNotices(data);
      setIsSearchMode(true); // Í≤ÄÏÉâ Î™®Îìú ÌôúÏÑ±Ìôî
      setCurrentPage(1); // Í≤ÄÏÉâ Ïãú Ï≤´ ÌéòÏù¥ÏßÄÎ°ú Î¶¨ÏÖã
    } catch (error) {
      console.error('Ï†ÑÏ≤¥ Í≥µÏßÄÏÇ¨Ìï≠ÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•ò Î∞úÏÉù:', error);
    }
  };

  // Ï¥ù Í≥µÏßÄÏÇ¨Ìï≠ Í∞úÏàò Î∂àÎü¨Ïò§Í∏∞
  const loadTotalPages = async () => {
    if (isSearchMode) return; // Í≤ÄÏÉâ Î™®ÎìúÏùº Í≤ΩÏö∞ ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Í≥ÑÏÇ∞ÌïòÏßÄ ÏïäÏùå
    try {
      const totalCount = await fetchTotalNoticesCount();
      setTotalPages(Math.ceil(totalCount / noticesPerPage));
    } catch (error) {
      console.error('Ï¥ù Í≥µÏßÄÏÇ¨Ìï≠ Í∞úÏàòÎ•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•ò Î∞úÏÉù:', error);
    }
  };

  useEffect(() => {
    if (!isSearchMode) {
      loadNotices(currentPage);
    }
    loadTotalPages();
  }, [currentPage, isSearchMode]); // ÌéòÏù¥ÏßÄ Î≥ÄÍ≤Ω Ïãú Î°úÎìú (Í≤ÄÏÉâ Î™®Îìú ÏïÑÎãê Îïå)

  // üìå Í≤ÄÏÉâ ÏûÖÎ†• Ìï∏Îì§Îü¨
  const handleSearchChange = (event) => {
    setSearchTerm(event.target.value);
  };

  // üìå Í≤ÄÏÉâ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú Ïã§Ìñâ
  const handleSearchSubmit = () => {
    if (searchTerm.trim()) {
      loadAllNotices(searchTerm); // Í≤ÄÏÉâÏñ¥Í∞Ä ÏûàÏúºÎ©¥ Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ÏóêÏÑú Í≤ÄÏÉâ
    } else {
      loadNotices(1); // Í≤ÄÏÉâÏñ¥Í∞Ä ÏóÜÏúºÎ©¥ Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞
      setCurrentPage(1);
    }
  };

  // Í≤ÄÏÉâ Ï∑®ÏÜå Î≤ÑÌäº ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
  const handleCancelSearch = async () => {
    setSearchTerm(''); // Í≤ÄÏÉâÏñ¥ Ï¥àÍ∏∞Ìôî
    setIsSearchMode(false); // Í≤ÄÏÉâ Î™®Îìú Ìï¥Ï†ú
    setCurrentPage(1); // Ï≤´ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô

    const data = await fetchNotices(1); // Îç∞Ïù¥ÌÑ∞Î•º Î®ºÏ†Ä Í∞ÄÏ†∏Ïò¥
    setNotices(data); // Í≥µÏßÄÏÇ¨Ìï≠ Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏
  };

  // üìå ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
  const handlePageChange = (page) => {
    setCurrentPage(page);
    if (!isSearchMode) {
      loadNotices(page);
    }
  };

  return (
    <>
      <Header className="Notice-header" />
      <section className="Notice-notice">
        {/* Í≥µÏßÄÏÇ¨Ìï≠ Ï†úÎ™© */}
        <div className="Notice-title-container">
          <h3 className={`Notice-title ${getDarkMode()}`}>Í≥µÏßÄÏÇ¨Ìï≠</h3>
        </div>

        {/* Í≤ÄÏÉâÏ∞Ω */}
        <div className="Notice-header">
          <div className="Notice-board-search">
            <div className="Notice-search-window">
              <form action="">
                <div className="Notice-search-wrap">
                  <label htmlFor="search" className="Notice-blind"></label>
                  <input
                    id="search"
                    type="search"
                    placeholder="Í≤ÄÏÉâÏñ¥Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."
                    className="Notice-search-input"
                    value={searchTerm}
                    onChange={handleSearchChange} // Í≤ÄÏÉâÏñ¥ Î≥ÄÍ≤Ω Ïãú ÏóÖÎç∞Ïù¥Ìä∏
                  />
                  {isSearchMode ? (
                    <Button
                      variant={darkMode ? 'outline-light' : 'outline-dark'}
                      className="Notice-btn Notice-btn-dark"
                      onClick={handleCancelSearch}
                    >
                      Í≤ÄÏÉâ Ï∑®ÏÜå
                    </Button>
                  ) : (
                    <Button
                      variant={darkMode ? 'outline-light' : 'outline-dark'}
                      className="Notice-btn Notice-btn-dark"
                      onClick={handleSearchSubmit}
                    >
                      Í≤ÄÏÉâ
                    </Button>
                  )}
                </div>
              </form>
            </div>
          </div>
        </div>

        <div className="Notice-board-list">
          <div className="Notice-container">
            <table className="Notice-board-table">
              <thead>
                <tr>
                  <th className="Notice-th-num">Î≤àÌò∏</th>
                  <th className="Notice-th-title">Ï†úÎ™©</th>
                  <th className="Notice-th-date">Îì±Î°ùÏùº</th>
                </tr>
              </thead>
              <tbody>
                {notices.length > 0 ? (
                  notices.map((data) => (
                    <tr key={data.no}>
                      <td>{data.rowNo}</td>
                      <td className="Notice-td-title">
                        <Link
                          to={`/noticeRead/${data.no}`}
                          className={getDarkMode()}
                        >
                          {data.title}
                        </Link>
                      </td>
                      <td>{data.subDate}</td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="3" style={{ textAlign: 'center' }}>
                      Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>

        {/* ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò (Í≤ÄÏÉâ Î™®ÎìúÍ∞Ä ÏïÑÎãê ÎïåÎßå ÌëúÏãú) */}
        {!isSearchMode && totalPages > 1 && (
          <Pagination
            className={`justify-content-center mt-4 ${getDarkMode()} custom-pagination`}
          >
            <Pagination.Prev
              disabled={currentPage === 1}
              onClick={() => handlePageChange(currentPage - 1)}
            />
            {Array.from({ length: totalPages }, (_, index) => (
              <Pagination.Item
                key={index + 1}
                active={index + 1 === currentPage}
                onClick={() => handlePageChange(index + 1)}
              >
                {index + 1}
              </Pagination.Item>
            ))}
            <Pagination.Next
              disabled={currentPage === totalPages}
              onClick={() => handlePageChange(currentPage + 1)}
            />
          </Pagination>
        )}
      </section>

      <Footer className="Notice-footer" />
    </>
  );
};

export default NoticeList;
